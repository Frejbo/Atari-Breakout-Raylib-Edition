using Raylib_cs;
using System.Numerics;


Raylib.InitWindow(1280, 720, "partikel");

Particle partikel = new Particle();
partikel.init_particle();

while (!Raylib.WindowShouldClose()) {
    draw();
}

void draw() {
    Raylib.BeginDrawing();
    Raylib.ClearBackground(Color.BLACK);
    partikel.update_particle();
    Raylib.EndDrawing();
}


class Particle {
    int number_of_points = 32;
    int initial_velocity = 1;
    public Color color = Color.WHITE;
    public int dot_radius = 2;

    List<ParticleDot> dots = new();
    public void init_particle() {
        for (int degree = 0; degree < 360; degree += 360/number_of_points) {
            // Vector2 dot = new Vector2(Raylib.GetScreenWidth()/2, Raylib.GetScreenHeight()/2);
            ParticleDot dot = new ParticleDot();

            double radian = (Math.PI / 180) * degree;

            // initial_velocity identifierar radien av startcirkeln
            dot.position.X += (float)Math.Cos(radian)*initial_velocity;
            dot.position.Y += (float)Math.Sin(radian)*initial_velocity;

            dot.velocity = new Vector2(dot.position.X - (Raylib.GetScreenWidth()/2), dot.position.Y - (Raylib.GetScreenHeight()/2));

            dots.Add(dot);
        }
    }

    // only call update_particle inside Raylib drawing!
    public void update_particle() {
        int index = 0;
        // Skapar en temporär kopia som kan loopas över, eftersom C# inte tillåter att ändra värden som loopas
        List<ParticleDot> temp_copy = new();
        foreach (ParticleDot dot in dots) {
            temp_copy.Add(dot);
        }

        foreach (ParticleDot dot in temp_copy) {
            // dots[index] += new Vector2(initial_velocity, initial_velocity);
            // change position
            dot.tick_velocity();

            Raylib.DrawCircle((int)dot.position.X, (int)dot.position.Y, dot_radius, color);
            index++;
        }
    }
}


class ParticleDot {
    public Vector2 position = new Vector2(Raylib.GetScreenWidth()/2, Raylib.GetScreenHeight()/2);
    public Vector2 velocity;


    Random rand = new Random();
    float GRAVITY = .000982f;
    public void tick_velocity() {
        float multiplier = 1-(rand.Next(1, 5)*.005f);
        velocity.X *= multiplier;
        velocity.Y *= multiplier;
        velocity.Y += GRAVITY*multiplier;

        position.X += velocity.X;
        position.Y += velocity.Y;
    }
}